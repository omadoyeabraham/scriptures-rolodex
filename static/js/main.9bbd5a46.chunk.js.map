{"version":3,"sources":["components/scripture-card.component.jsx","components/scripture-list.component.jsx","components/search-input.component.jsx","App.js","serviceWorker.js","index.js"],"names":["ScriptureCard","props","scripture","className","src","image","url","alt","description","verse","tags","map","tag","index","key","ScriptureList","scriptures","id","SearchInput","handleChange","placeholder","type","onChange","e","target","value","App","onSearchInputChange","setState","searchField","state","users","this","filteredScriptures","filter","toLowerCase","includes","fetch","then","response","json","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8PAEaA,EAAgB,SAACC,GAAW,IAC/BC,EAAcD,EAAdC,UACR,OACE,yBAAKC,UAAU,8CACb,yBAAKC,IAAKF,EAAUG,MAAMC,IAAKC,IAAKL,EAAUG,MAAMG,cACpD,yBAAKL,UAAU,OACb,wBAAIA,UAAU,gCAAgCD,EAAUO,OACxD,yBAAKN,UAAU,QACZD,EAAUQ,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAClB,wBACEV,UAAU,uDACVW,IAAKD,GAEJD,UCZFG,EAAgB,SAACd,GAC5B,OACE,yBAAKE,UAAU,sFACZF,EAAMe,WAAWL,KAAI,SAACT,GAAD,OACpB,kBAAC,EAAD,CAAeY,IAAKZ,EAAUe,GAAIf,UAAWA,SCLxCgB,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAC1C,OACE,2BACEjB,UAAU,6BACVkB,KAAK,SACLD,YAAaA,EACbE,SAAU,SAACC,GACTJ,EAAaI,EAAEC,OAAOC,WCmFfC,E,kDAvFb,aAAe,IAAD,8BACZ,gBAyEFC,oBAAsB,SAACF,GACrB,EAAKG,SAAS,CAAEC,YAAaJ,KAxE7B,EAAKK,MAAQ,CACXd,WAAY,CACV,CACEC,GAAI,EACJR,MAAO,iBACPJ,MAAO,CACLC,IAAK,yDACLE,YAAa,kBAEfE,KAAM,CAAC,QAAS,SAElB,CACEO,GAAI,EACJR,MAAO,YACPJ,MAAO,CACLC,IAAK,yDACLE,YAAa,kBAEfE,KAAM,CAAC,QAAS,SAElB,CACEO,GAAI,EACJR,MAAO,mBACPJ,MAAO,CACLC,IAAK,yDACLE,YAAa,kBAEfE,KAAM,CAAC,QAAS,SAElB,CACEO,GAAI,EACJR,MAAO,eACPJ,MAAO,CACLC,IAAK,yDACLE,YAAa,kBAEfE,KAAM,CAAC,QAAS,UAGpBmB,YAAa,GACbE,MAAO,IA3CG,E,qDAkDJ,IAAD,EAC6BC,KAAKF,MAAjCd,EADD,EACCA,WAAYa,EADb,EACaA,YACdI,EAAqBjB,EAAWkB,QAAO,SAAChC,GAAD,OAC3CA,EAAUO,MAAM0B,cAAcC,SAASP,EAAYM,kBAErD,OACE,yBAAKhC,UAAU,4BACb,yBAAKA,UAAU,0CACb,kBAAC,EAAD,CACEgB,aAAca,KAAKL,oBACnBP,YAAY,6BAGhB,yBAAKjB,UAAU,yCACb,kBAAC,EAAD,CAAea,WAAYiB,Q,0CAiBd,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACP,GAAD,OAAW,EAAKH,SAAS,CAAEG,iB,GArFrBU,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9bbd5a46.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const ScriptureCard = (props) => {\n  const { scripture } = props;\n  return (\n    <div className=\"bg-white border rounded-lg overflow-hidden\">\n      <img src={scripture.image.url} alt={scripture.image.description} />\n      <div className=\"p-6\">\n        <h4 className=\"font-bold text-xlg uppercase\">{scripture.verse}</h4>\n        <div className=\"mt-5\">\n          {scripture.tags.map((tag, index) => (\n            <h5\n              className=\"inline bg-green-200 px-2 mr-2 py-1 border rounded-lg\"\n              key={index}\n            >\n              {tag}\n            </h5>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ScriptureCard } from \"./scripture-card.component\";\n\nexport const ScriptureList = (props) => {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4\">\n      {props.scriptures.map((scripture) => (\n        <ScriptureCard key={scripture.id} scripture={scripture}></ScriptureCard>\n      ))}\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\n\nexport const SearchInput = ({ handleChange, placeholder }) => {\n  return (\n    <input\n      className=\"w-64 p-2 rounded-lg border\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={(e) => {\n        handleChange(e.target.value);\n      }}\n    ></input>\n  );\n};\n","import React from \"react\";\nimport { ScriptureList } from \"./components/scripture-list.component\";\nimport { SearchInput } from \"./components/search-input.component\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      scriptures: [\n        {\n          id: 1,\n          verse: \"Ephesians 6:12\",\n          image: {\n            url: \"https://source.unsplash.com/180*180/?prayer,faith,fire\",\n            description: \"A lovely image\",\n          },\n          tags: [\"faith\", \"fire\"],\n        },\n        {\n          id: 2,\n          verse: \"John 6:12\",\n          image: {\n            url: \"https://source.unsplash.com/180*180/?prayer,faith,fire\",\n            description: \"A lovely image\",\n          },\n          tags: [\"faith\", \"fire\"],\n        },\n        {\n          id: 3,\n          verse: \"Revelations 6:12\",\n          image: {\n            url: \"https://source.unsplash.com/180*180/?prayer,faith,fire\",\n            description: \"A lovely image\",\n          },\n          tags: [\"faith\", \"fire\"],\n        },\n        {\n          id: 4,\n          verse: \"Numbers 6:12\",\n          image: {\n            url: \"https://source.unsplash.com/180*180/?prayer,faith,fire\",\n            description: \"A lovely image\",\n          },\n          tags: [\"faith\", \"fire\"],\n        },\n      ],\n      searchField: \"\",\n      users: [],\n    };\n  }\n\n  /**\n   * Render the UI for the component\n   */\n  render() {\n    const { scriptures, searchField } = this.state;\n    const filteredScriptures = scriptures.filter((scripture) =>\n      scripture.verse.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"bg-gray-200 min-h-screen\">\n        <div className=\"pt-10 flex items-center justify-center\">\n          <SearchInput\n            handleChange={this.onSearchInputChange}\n            placeholder=\"Search the word of life\"\n          ></SearchInput>\n        </div>\n        <div className=\" p-8 flex items-center justify-center\">\n          <ScriptureList scriptures={filteredScriptures}></ScriptureList>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Handle when the search input changes\n   * @param {*} value\n   */\n  onSearchInputChange = (value) => {\n    this.setState({ searchField: value });\n  };\n\n  /**\n   * Fetch data after the component is mounted\n   */\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then((response) => response.json())\n      .then((users) => this.setState({ users }));\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./tailwind.min.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}